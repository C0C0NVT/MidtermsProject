#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MidtermsProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MidtermProject")]
	public partial class LibraryDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookState(BookState instance);
    partial void UpdateBookState(BookState instance);
    partial void DeleteBookState(BookState instance);
    partial void InsertBorrowTransaction(BorrowTransaction instance);
    partial void UpdateBorrowTransaction(BorrowTransaction instance);
    partial void DeleteBorrowTransaction(BorrowTransaction instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertFine(Fine instance);
    partial void UpdateFine(Fine instance);
    partial void DeleteFine(Fine instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertISBN(ISBN instance);
    partial void UpdateISBN(ISBN instance);
    partial void DeleteISBN(ISBN instance);
    partial void InsertLibraryVisit(LibraryVisit instance);
    partial void UpdateLibraryVisit(LibraryVisit instance);
    partial void DeleteLibraryVisit(LibraryVisit instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertTransactionStatus(TransactionStatus instance);
    partial void UpdateTransactionStatus(TransactionStatus instance);
    partial void DeleteTransactionStatus(TransactionStatus instance);
    partial void Insertusers_table(users_table instance);
    partial void Updateusers_table(users_table instance);
    partial void Deleteusers_table(users_table instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    #endregion
		
		public LibraryDataContextDataContext() : 
				base(global::MidtermsProject.Properties.Settings.Default.MidtermProjectConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookState> BookStates
		{
			get
			{
				return this.GetTable<BookState>();
			}
		}
		
		public System.Data.Linq.Table<BorrowTransaction> BorrowTransactions
		{
			get
			{
				return this.GetTable<BorrowTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Fine> Fines
		{
			get
			{
				return this.GetTable<Fine>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<ISBN> ISBNs
		{
			get
			{
				return this.GetTable<ISBN>();
			}
		}
		
		public System.Data.Linq.Table<LibraryVisit> LibraryVisits
		{
			get
			{
				return this.GetTable<LibraryVisit>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<TransactionStatus> TransactionStatus
		{
			get
			{
				return this.GetTable<TransactionStatus>();
			}
		}
		
		public System.Data.Linq.Table<users_table> users_tables
		{
			get
			{
				return this.GetTable<users_table>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BookID;
		
		private string _GenreID;
		
		private string _ISBNID;
		
		private string _BookStateID;
		
		private string _Title;
		
		private string _Author;
		
		private System.Nullable<int> _PublicationYear;
		
		private System.Nullable<int> _AvailableCopies;
		
		private EntitySet<BorrowTransaction> _BorrowTransactions;
		
		private EntityRef<BookState> _BookState;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<ISBN> _ISBN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(string value);
    partial void OnBookIDChanged();
    partial void OnGenreIDChanging(string value);
    partial void OnGenreIDChanged();
    partial void OnISBNIDChanging(string value);
    partial void OnISBNIDChanged();
    partial void OnBookStateIDChanging(string value);
    partial void OnBookStateIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnPublicationYearChanging(System.Nullable<int> value);
    partial void OnPublicationYearChanged();
    partial void OnAvailableCopiesChanging(System.Nullable<int> value);
    partial void OnAvailableCopiesChanged();
    #endregion
		
		public Book()
		{
			this._BorrowTransactions = new EntitySet<BorrowTransaction>(new Action<BorrowTransaction>(this.attach_BorrowTransactions), new Action<BorrowTransaction>(this.detach_BorrowTransactions));
			this._BookState = default(EntityRef<BookState>);
			this._Genre = default(EntityRef<Genre>);
			this._ISBN = default(EntityRef<ISBN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="VarChar(50)")]
		public string GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBNID", DbType="VarChar(50)")]
		public string ISBNID
		{
			get
			{
				return this._ISBNID;
			}
			set
			{
				if ((this._ISBNID != value))
				{
					if (this._ISBN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnISBNIDChanging(value);
					this.SendPropertyChanging();
					this._ISBNID = value;
					this.SendPropertyChanged("ISBNID");
					this.OnISBNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookStateID", DbType="VarChar(50)")]
		public string BookStateID
		{
			get
			{
				return this._BookStateID;
			}
			set
			{
				if ((this._BookStateID != value))
				{
					if (this._BookState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookStateIDChanging(value);
					this.SendPropertyChanging();
					this._BookStateID = value;
					this.SendPropertyChanged("BookStateID");
					this.OnBookStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationYear", DbType="Int")]
		public System.Nullable<int> PublicationYear
		{
			get
			{
				return this._PublicationYear;
			}
			set
			{
				if ((this._PublicationYear != value))
				{
					this.OnPublicationYearChanging(value);
					this.SendPropertyChanging();
					this._PublicationYear = value;
					this.SendPropertyChanged("PublicationYear");
					this.OnPublicationYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableCopies", DbType="Int")]
		public System.Nullable<int> AvailableCopies
		{
			get
			{
				return this._AvailableCopies;
			}
			set
			{
				if ((this._AvailableCopies != value))
				{
					this.OnAvailableCopiesChanging(value);
					this.SendPropertyChanging();
					this._AvailableCopies = value;
					this.SendPropertyChanged("AvailableCopies");
					this.OnAvailableCopiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BorrowTransaction", Storage="_BorrowTransactions", ThisKey="BookID", OtherKey="BookID")]
		public EntitySet<BorrowTransaction> BorrowTransactions
		{
			get
			{
				return this._BorrowTransactions;
			}
			set
			{
				this._BorrowTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookState_Book", Storage="_BookState", ThisKey="BookStateID", OtherKey="BookStateID", IsForeignKey=true)]
		public BookState BookState
		{
			get
			{
				return this._BookState.Entity;
			}
			set
			{
				BookState previousValue = this._BookState.Entity;
				if (((previousValue != value) 
							|| (this._BookState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookState.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._BookState.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._BookStateID = value.BookStateID;
					}
					else
					{
						this._BookStateID = default(string);
					}
					this.SendPropertyChanged("BookState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Book", Storage="_Genre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(string);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISBN_Book", Storage="_ISBN", ThisKey="ISBNID", OtherKey="ISBNID", IsForeignKey=true)]
		public ISBN ISBN
		{
			get
			{
				return this._ISBN.Entity;
			}
			set
			{
				ISBN previousValue = this._ISBN.Entity;
				if (((previousValue != value) 
							|| (this._ISBN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ISBN.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._ISBN.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._ISBNID = value.ISBNID;
					}
					else
					{
						this._ISBNID = default(string);
					}
					this.SendPropertyChanged("ISBN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowTransactions(BorrowTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BorrowTransactions(BorrowTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookStates")]
	public partial class BookState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BookStateID;
		
		private string _BookState1;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookStateIDChanging(string value);
    partial void OnBookStateIDChanged();
    partial void OnBookState1Changing(string value);
    partial void OnBookState1Changed();
    #endregion
		
		public BookState()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookStateID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BookStateID
		{
			get
			{
				return this._BookStateID;
			}
			set
			{
				if ((this._BookStateID != value))
				{
					this.OnBookStateIDChanging(value);
					this.SendPropertyChanging();
					this._BookStateID = value;
					this.SendPropertyChanged("BookStateID");
					this.OnBookStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BookState", Storage="_BookState1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string BookState1
		{
			get
			{
				return this._BookState1;
			}
			set
			{
				if ((this._BookState1 != value))
				{
					this.OnBookState1Changing(value);
					this.SendPropertyChanging();
					this._BookState1 = value;
					this.SendPropertyChanged("BookState1");
					this.OnBookState1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookState_Book", Storage="_Books", ThisKey="BookStateID", OtherKey="BookStateID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.BookState = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.BookState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BorrowTransactions")]
	public partial class BorrowTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TransactionID;
		
		private string _StudentID;
		
		private string _BookID;
		
		private string _StatusID;
		
		private System.Nullable<System.DateTime> _BorrowDate;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private EntitySet<Fine> _Fines;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<TransactionStatus> _TransactionStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(string value);
    partial void OnTransactionIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnBookIDChanging(string value);
    partial void OnBookIDChanged();
    partial void OnStatusIDChanging(string value);
    partial void OnStatusIDChanged();
    partial void OnBorrowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBorrowDateChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    #endregion
		
		public BorrowTransaction()
		{
			this._Fines = new EntitySet<Fine>(new Action<Fine>(this.attach_Fines), new Action<Fine>(this.detach_Fines));
			this._Book = default(EntityRef<Book>);
			this._Student = default(EntityRef<Student>);
			this._TransactionStatus = default(EntityRef<TransactionStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="VarChar(50)")]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookID", DbType="VarChar(50)")]
		public string BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="VarChar(50)")]
		public string StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._TransactionStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowDate", DbType="Date")]
		public System.Nullable<System.DateTime> BorrowDate
		{
			get
			{
				return this._BorrowDate;
			}
			set
			{
				if ((this._BorrowDate != value))
				{
					this.OnBorrowDateChanging(value);
					this.SendPropertyChanging();
					this._BorrowDate = value;
					this.SendPropertyChanged("BorrowDate");
					this.OnBorrowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowTransaction_Fine", Storage="_Fines", ThisKey="TransactionID", OtherKey="TransactionID")]
		public EntitySet<Fine> Fines
		{
			get
			{
				return this._Fines;
			}
			set
			{
				this._Fines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BorrowTransaction", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BorrowTransactions.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BorrowTransactions.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(string);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_BorrowTransaction", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.BorrowTransactions.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.BorrowTransactions.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransactionStatus_BorrowTransaction", Storage="_TransactionStatus", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public TransactionStatus TransactionStatus
		{
			get
			{
				return this._TransactionStatus.Entity;
			}
			set
			{
				TransactionStatus previousValue = this._TransactionStatus.Entity;
				if (((previousValue != value) 
							|| (this._TransactionStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransactionStatus.Entity = null;
						previousValue.BorrowTransactions.Remove(this);
					}
					this._TransactionStatus.Entity = value;
					if ((value != null))
					{
						value.BorrowTransactions.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(string);
					}
					this.SendPropertyChanged("TransactionStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fines(Fine entity)
		{
			this.SendPropertyChanging();
			entity.BorrowTransaction = this;
		}
		
		private void detach_Fines(Fine entity)
		{
			this.SendPropertyChanging();
			entity.BorrowTransaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CourseID;
		
		private string _CourseName;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(string value);
    partial void OnCourseIDChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    #endregion
		
		public Course()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student", Storage="_Students", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fines")]
	public partial class Fine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FineID;
		
		private string _TransactionID;
		
		private System.Nullable<int> _DaysLate;
		
		private System.Nullable<decimal> _FineAmount;
		
		private EntityRef<BorrowTransaction> _BorrowTransaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFineIDChanging(string value);
    partial void OnFineIDChanged();
    partial void OnTransactionIDChanging(string value);
    partial void OnTransactionIDChanged();
    partial void OnDaysLateChanging(System.Nullable<int> value);
    partial void OnDaysLateChanged();
    partial void OnFineAmountChanging(System.Nullable<decimal> value);
    partial void OnFineAmountChanged();
    #endregion
		
		public Fine()
		{
			this._BorrowTransaction = default(EntityRef<BorrowTransaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FineID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FineID
		{
			get
			{
				return this._FineID;
			}
			set
			{
				if ((this._FineID != value))
				{
					this.OnFineIDChanging(value);
					this.SendPropertyChanging();
					this._FineID = value;
					this.SendPropertyChanged("FineID");
					this.OnFineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="VarChar(50)")]
		public string TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					if (this._BorrowTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysLate", DbType="Int")]
		public System.Nullable<int> DaysLate
		{
			get
			{
				return this._DaysLate;
			}
			set
			{
				if ((this._DaysLate != value))
				{
					this.OnDaysLateChanging(value);
					this.SendPropertyChanging();
					this._DaysLate = value;
					this.SendPropertyChanged("DaysLate");
					this.OnDaysLateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FineAmount", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> FineAmount
		{
			get
			{
				return this._FineAmount;
			}
			set
			{
				if ((this._FineAmount != value))
				{
					this.OnFineAmountChanging(value);
					this.SendPropertyChanging();
					this._FineAmount = value;
					this.SendPropertyChanged("FineAmount");
					this.OnFineAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowTransaction_Fine", Storage="_BorrowTransaction", ThisKey="TransactionID", OtherKey="TransactionID", IsForeignKey=true)]
		public BorrowTransaction BorrowTransaction
		{
			get
			{
				return this._BorrowTransaction.Entity;
			}
			set
			{
				BorrowTransaction previousValue = this._BorrowTransaction.Entity;
				if (((previousValue != value) 
							|| (this._BorrowTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BorrowTransaction.Entity = null;
						previousValue.Fines.Remove(this);
					}
					this._BorrowTransaction.Entity = value;
					if ((value != null))
					{
						value.Fines.Add(this);
						this._TransactionID = value.TransactionID;
					}
					else
					{
						this._TransactionID = default(string);
					}
					this.SendPropertyChanged("BorrowTransaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genres")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GenreID;
		
		private string _GenreName;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(string value);
    partial void OnGenreIDChanged();
    partial void OnGenreNameChanging(string value);
    partial void OnGenreNameChanged();
    #endregion
		
		public Genre()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string GenreName
		{
			get
			{
				return this._GenreName;
			}
			set
			{
				if ((this._GenreName != value))
				{
					this.OnGenreNameChanging(value);
					this.SendPropertyChanging();
					this._GenreName = value;
					this.SendPropertyChanged("GenreName");
					this.OnGenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Book", Storage="_Books", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ISBNs")]
	public partial class ISBN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ISBNID;
		
		private string _ISBN1;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnISBNIDChanging(string value);
    partial void OnISBNIDChanged();
    partial void OnISBN1Changing(string value);
    partial void OnISBN1Changed();
    #endregion
		
		public ISBN()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBNID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ISBNID
		{
			get
			{
				return this._ISBNID;
			}
			set
			{
				if ((this._ISBNID != value))
				{
					this.OnISBNIDChanging(value);
					this.SendPropertyChanging();
					this._ISBNID = value;
					this.SendPropertyChanged("ISBNID");
					this.OnISBNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ISBN", Storage="_ISBN1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ISBN1
		{
			get
			{
				return this._ISBN1;
			}
			set
			{
				if ((this._ISBN1 != value))
				{
					this.OnISBN1Changing(value);
					this.SendPropertyChanging();
					this._ISBN1 = value;
					this.SendPropertyChanged("ISBN1");
					this.OnISBN1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ISBN_Book", Storage="_Books", ThisKey="ISBNID", OtherKey="ISBNID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.ISBN = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.ISBN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LibraryVisits")]
	public partial class LibraryVisit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VisitID;
		
		private string _StudentID;
		
		private System.Nullable<System.DateTime> _VisitDate;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(string value);
    partial void OnVisitIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnVisitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVisitDateChanged();
    #endregion
		
		public LibraryVisit()
		{
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="VarChar(50)")]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDate", DbType="Date")]
		public System.Nullable<System.DateTime> VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_LibraryVisit", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.LibraryVisits.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.LibraryVisits.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudentID;
		
		private string _CourseID;
		
		private string _Name;
		
		private string _Address;
		
		private string _ContactNumber;
		
		private EntitySet<BorrowTransaction> _BorrowTransactions;
		
		private EntitySet<LibraryVisit> _LibraryVisits;
		
		private EntitySet<users_table> _users_tables;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnCourseIDChanging(string value);
    partial void OnCourseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    #endregion
		
		public Student()
		{
			this._BorrowTransactions = new EntitySet<BorrowTransaction>(new Action<BorrowTransaction>(this.attach_BorrowTransactions), new Action<BorrowTransaction>(this.detach_BorrowTransactions));
			this._LibraryVisits = new EntitySet<LibraryVisit>(new Action<LibraryVisit>(this.attach_LibraryVisits), new Action<LibraryVisit>(this.detach_LibraryVisits));
			this._users_tables = new EntitySet<users_table>(new Action<users_table>(this.attach_users_tables), new Action<users_table>(this.detach_users_tables));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="VarChar(50)")]
		public string CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(20)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_BorrowTransaction", Storage="_BorrowTransactions", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<BorrowTransaction> BorrowTransactions
		{
			get
			{
				return this._BorrowTransactions;
			}
			set
			{
				this._BorrowTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_LibraryVisit", Storage="_LibraryVisits", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<LibraryVisit> LibraryVisits
		{
			get
			{
				return this._LibraryVisits;
			}
			set
			{
				this._LibraryVisits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_users_table", Storage="_users_tables", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<users_table> users_tables
		{
			get
			{
				return this._users_tables;
			}
			set
			{
				this._users_tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowTransactions(BorrowTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_BorrowTransactions(BorrowTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_LibraryVisits(LibraryVisit entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_LibraryVisits(LibraryVisit entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_users_tables(users_table entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_users_tables(users_table entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionStatus")]
	public partial class TransactionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StatusID;
		
		private string _TransactionStatus1;
		
		private EntitySet<BorrowTransaction> _BorrowTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(string value);
    partial void OnStatusIDChanged();
    partial void OnTransactionStatus1Changing(string value);
    partial void OnTransactionStatus1Changed();
    #endregion
		
		public TransactionStatus()
		{
			this._BorrowTransactions = new EntitySet<BorrowTransaction>(new Action<BorrowTransaction>(this.attach_BorrowTransactions), new Action<BorrowTransaction>(this.detach_BorrowTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TransactionStatus", Storage="_TransactionStatus1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionStatus1
		{
			get
			{
				return this._TransactionStatus1;
			}
			set
			{
				if ((this._TransactionStatus1 != value))
				{
					this.OnTransactionStatus1Changing(value);
					this.SendPropertyChanging();
					this._TransactionStatus1 = value;
					this.SendPropertyChanged("TransactionStatus1");
					this.OnTransactionStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransactionStatus_BorrowTransaction", Storage="_BorrowTransactions", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<BorrowTransaction> BorrowTransactions
		{
			get
			{
				return this._BorrowTransactions;
			}
			set
			{
				this._BorrowTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowTransactions(BorrowTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TransactionStatus = this;
		}
		
		private void detach_BorrowTransactions(BorrowTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TransactionStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users_tables")]
	public partial class users_table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _UserPass;
		
		private string _UserName;
		
		private string _UserRole;
		
		private string _StudentID;
		
		private EntitySet<Notification> _Notifications;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnUserPassChanging(string value);
    partial void OnUserPassChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserRoleChanging(string value);
    partial void OnUserRoleChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    #endregion
		
		public users_table()
		{
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPass", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserPass
		{
			get
			{
				return this._UserPass;
			}
			set
			{
				if ((this._UserPass != value))
				{
					this.OnUserPassChanging(value);
					this.SendPropertyChanging();
					this._UserPass = value;
					this.SendPropertyChanged("UserPass");
					this.OnUserPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				if ((this._UserRole != value))
				{
					this.OnUserRoleChanging(value);
					this.SendPropertyChanging();
					this._UserRole = value;
					this.SendPropertyChanged("UserRole");
					this.OnUserRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="VarChar(50)")]
		public string StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_table_Notification", Storage="_Notifications", ThisKey="UserID", OtherKey="SenderID")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_users_table", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.users_tables.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.users_tables.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.users_table = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.users_table = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notifications")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationID;
		
		private string _SenderID;
		
		private string _RecipientRole;
		
		private string _Message;
		
		private System.DateTime _Timestamp;
		
		private System.Nullable<bool> _IsRead;
		
		private EntityRef<users_table> _users_table;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIDChanging(int value);
    partial void OnNotificationIDChanged();
    partial void OnSenderIDChanging(string value);
    partial void OnSenderIDChanged();
    partial void OnRecipientRoleChanging(string value);
    partial void OnRecipientRoleChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    #endregion
		
		public Notification()
		{
			this._users_table = default(EntityRef<users_table>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationID
		{
			get
			{
				return this._NotificationID;
			}
			set
			{
				if ((this._NotificationID != value))
				{
					this.OnNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._NotificationID = value;
					this.SendPropertyChanged("NotificationID");
					this.OnNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._users_table.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientRole", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string RecipientRole
		{
			get
			{
				return this._RecipientRole;
			}
			set
			{
				if ((this._RecipientRole != value))
				{
					this.OnRecipientRoleChanging(value);
					this.SendPropertyChanging();
					this._RecipientRole = value;
					this.SendPropertyChanged("RecipientRole");
					this.OnRecipientRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit")]
		public System.Nullable<bool> IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_table_Notification", Storage="_users_table", ThisKey="SenderID", OtherKey="UserID", IsForeignKey=true)]
		public users_table users_table
		{
			get
			{
				return this._users_table.Entity;
			}
			set
			{
				users_table previousValue = this._users_table.Entity;
				if (((previousValue != value) 
							|| (this._users_table.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users_table.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._users_table.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._SenderID = value.UserID;
					}
					else
					{
						this._SenderID = default(string);
					}
					this.SendPropertyChanged("users_table");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
